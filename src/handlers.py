# Initialized `handlers.py` generated by ipm.
# Regists your handlers here.
# Documents at https://ipm.hydroroll.team/

from infini.register import Register
from infini.input import Input
from infini.output import Output
from infini.router import Startswith
from infini.loader import Loader
from infini.typing import Dict, List

from diceutils.utils import format_str, format_msg
from diceutils.dicer import Dicer
from diceutils.cards import Cards
from diceutils.parser import Positional, CommandParser, Commands, Command, Optional

from .madness import madness_end, manias, temporary_madness, phobias
from .investigator import Investigator

import random

register = Register()
coc_cards = Cards(mode="coc")
coc_cache_cards = Cards(mode="coc")
coc_attrs_dict: Dict[str, List[str]] = {
    "名字": ["name", "名字", "名称", "姓名"],
    "性别": ["sex", "性别"],
    "年龄": ["age", "年龄"],
    "力量": ["str", "力量", "攻击", "攻击力"],
    "体质": ["con", "体质"],
    "体型": ["siz", "体型"],
    "敏捷": ["dex", "敏捷"],
    "外貌": ["app", "外貌"],
    "智力": ["int", "智力", "灵感"],
    "意志": ["pow", "意志", "精神"],
    "教育": ["edu", "教育"],
    "幸运": ["luc", "幸运"],
    "理智": ["san", "理智", "精神状态", "san值"],
    "生命": ["hp", "生命"],
}
coc_rolls: Dict[str, Dict[str, Dict[str, str]]] = {}
coc_cards.init()


def judger(
    _: Input, dice: Dicer, exp: int | None, name: str = None, reason: str = None
) -> Output:
    """类 COC 模式技能检定结果"""
    result = dice.roll().calc()

    if isinstance(exp, int):
        if result == 100:
            judge = "大失败!"
        elif exp < 50 and result > 95:
            judge = "大失败!"
        elif result == 1:
            judge = "大成功!"
        elif result <= exp // 5:
            judge = "极难成功"
        elif result <= exp // 2:
            judge = "困难成功"
        elif result <= exp:
            judge = "成功"
        else:
            judge = "失败"
    else:
        judge = ""

    return Output(
        "text",
        "dg.docimasy.skill",
        block=True,
        variables={
            "name": name,
            "value": exp,
            "desc": dice.description(),
            "reason": reason,
            "judge": judge,
        },
    )


@register.handler(Startswith(".coc"), priority=1)
def coc_hander(input: Input):
    args = format_msg(input.get_plain_text(), begin=".coc", zh_en=True)
    qid = input.variables.get("user_id") or "0"

    commands = CommandParser(
        Commands(
            [
                Positional("roll", int, 1),
                Command("cache", False),
                Optional("set", int),
                Optional("age", int, 20),
                Optional("name", str),
                Optional("sex", str, "女"),
            ]
        ),
        args=args,
        auto=True,
    ).results

    round = commands["roll"]
    if round > 9:
        yield Output(
            "text",
            "coc.coc.roll.too_much_round",
            block=True,
            variables={"round": round},
        )

    if commands["set"] or commands["set"] == 0:
        if qid not in coc_rolls:
            coc_rolls[qid] = {}
        if commands["set"] not in coc_rolls[qid]:
            yield Output(
                "text",
                "coc.coc.set.card_not_found",
                block=True,
                variables={"sequence": commands["set"]},
            )
        coc_cards.update(input, coc_rolls[qid][commands["set"]], save=True)
        inv = Investigator().load(coc_rolls[qid][commands["set"]])
        coc_rolls[qid] = {}
        yield Output(
            "text",
            "coc.coc.set",
            block=True,
            variables={
                "sequence": commands["set"],
                "card_detail": inv.output(),
            },
        )

    if commands["cache"]:
        if qid not in coc_rolls.keys():
            yield Output(
                "text",
                "coc.coc.cache.not_found",
                block=True,
            )

        cards = []
        for i, item in coc_rolls[qid].items():
            inv = Investigator().load(item)
            count = inv.rollcount()
            cards.append(
                {
                    "sequence": i,
                    "card_detail": inv.output(),
                    "count": count,
                }
            )
            i += 1

        yield Output("text", "coc.coc.cache", block=True, variables={"cards": cards})

    age = commands["age"]
    name = commands["name"]

    if not (15 <= age and age < 90):
        yield Output(
            "text",
            "coc.coc.roll.age_change",
            variables={"text": Investigator().age_change(age)},
        )

    if qid in coc_rolls.keys():
        rolled = len(coc_rolls[qid].keys())
    else:
        coc_rolls[qid] = {}
        rolled = 0

    cards = []
    for i in range(round):
        inv = Investigator()
        inv.age_change(age)
        inv.sex = commands["sex"]

        if name:
            inv.name = name

        coc_rolls[qid][rolled + i] = inv.__dict__
        count = inv.rollcount()

        cards.append(
            {
                "sequence": rolled + i,
                "card_detail": inv.output(),
                "count": count,
            }
        )

    (coc_cache_cards.update(input, inv.__dict__, save=False) if round == 1 else ...)

    yield Output("text", "coc.coc.roll", block=True, variables={"cards": cards})


@register.handler(Startswith(".ra"), priority=1)
def ra_hander(input: Input):
    args = format_msg(input.get_plain_text(), begin=".ra")

    if len(args) == 0:
        yield Output("text", "coc.ra.help", block=True)

    if len(args) > 4:
        yield Output(
            "text",
            "coc.ra.error.to_much_args",
            block=True,
            variables={"given": len(args)},
        )

    skill_name = args[0]

    card_data = coc_cards.get(input)
    if not card_data:
        if len(args) == 1:
            yield judger(input, Dicer(), 0, name=skill_name)

        yield judger(input, Dicer(), int(args[1]), name=skill_name)

    inv = Investigator().load(card_data)

    is_base = False
    exp = None
    for attr_name, alias in coc_attrs_dict.items():
        if args[0] in alias:
            exp = int(getattr(inv, alias[0]))
            is_base = True
            skill_name = attr_name
            break

    if not is_base:
        for skill in inv.skills:
            if args[0] == skill:
                exp = inv.skills[skill]
                break
            else:
                exp = False

    if not exp:
        if len(args) == 1:
            exp = 0
        elif not args[1].isdigit():
            yield Output("text", "coc.ra.error.invalid_value", block=True)
        else:
            exp = int(args[1])

        yield judger(input, Dicer(), exp, name=args[0])
    elif exp and len(args) > 1:
        if not args[1].isdigit():
            return

        yield Output(
            "text", "coc.ra.record_exsists", variables={"name": args[0], "exp": exp}
        )
        yield judger(input, Dicer(), int(args[1]), name=args[0])

    # time = 1

    # for _ in range(time - 1):
    #     r += judger(input, Dicer(), exp, name=args[0])

    return judger(input, Dicer(), exp, name=skill_name)


@register.handler(Startswith(".sc"), priority=2)
def sc_handler(input: Input):
    text = format_str(input.get_plain_text(), begin=".sc")
    if not text:
        yield Output("text", "coc.sc.help", block=True)

    try:
        args = text.split(" ")
        args = list(filter(None, args))
        using_card = False
        s_and_f = args[0].split("/")
        success = Dicer(s_and_f[0]).roll().outcome
        failure = Dicer(s_and_f[1]).roll().outcome

        if len(args) > 1:
            card = {"san": int(args[1]), "name": "未指定"}
            yield Output("text", "coc.sc.assign")
            using_card = False
        else:
            if not (card := coc_cards.get(input)):
                card = {"san": 0, "name": "未指定"}
            using_card = True

        docimasy_number = Dicer().roll().calc()
        san_before = card["san"]

        if docimasy_number <= card["san"]:
            down = success
            docimasy_status = "成功"
        else:
            down = failure
            docimasy_status = "失败"
        if down >= card["san"]:
            docimasy_result = "陷入了永久性疯狂"
        elif down >= (card["san"] // 5):
            docimasy_result = "陷入了不定性疯狂"
        elif down >= 5:
            docimasy_result = "陷入了临时性疯狂"
        else:
            docimasy_result = "未受到严重影响"

        card["san"] -= down
        if card["san"] <= 0:
            card["san"] = 0

        if using_card:
            coc_cards.update(input, card)

        yield Output(
            "text",
            "coc.sc",
            variables={
                "card_name": card["name"],
                "san_before": san_before,
                "san": card["san"],
                "docimasy_number": docimasy_number,
                "docimasy_status": docimasy_status,
                "docimasy_result": docimasy_result,
                "down": down,
            },
        )
    except Exception as error:
        yield Output("text", "coc.sc.error", variables={"error": str(error)})


@register.handler(Startswith(".ti"), priority=2)
def ti_handler(_: Input):
    i = random.randint(1, 10)
    j = random.randint(1, 100)

    return Output(
        "text",
        "coc.ti",
        block=True,
        variables={
            "i": i,
            "temporary_madness": temporary_madness[i - 1],
            "phobias": phobias[j - 1],
            "manias": manias[j - 1],
            "sustain": random.randint(1, 10),
        },
    )


@register.handler(Startswith(".li"), priority=2)
def li_handler(_: Input):
    i = random.randint(1, 10)
    j = random.randint(1, 100)

    return Output(
        "text",
        "coc.li",
        block=True,
        variables={
            "i": i,
            "madness": madness_end[i - 1],
            "phobias": phobias[j - 1],
            "manias": manias[j - 1],
            "sustain": random.randint(1, 10),
        },
    )
